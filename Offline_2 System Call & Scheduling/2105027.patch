diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..7a41b10
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "queue": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index f8c820e..0613828 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_history\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..df6ec8b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            mlfq_init(void);
+void            srand(unsigned long);
+unsigned long   rand(void);
+int             getpinfo(uint64 pstat_addr);
+int             syscall_stat(int syscall_num, struct syscall_stat *stat);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -140,6 +146,8 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+void            syscall_stat_init(void);
+int             get_syscall_stat(int, struct syscall_stat*);
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..c1cc627 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -29,6 +29,8 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    syscall_stat_init();
+    mlfq_init();
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/param.h b/kernel/param.h
index 80ec6d3..15b6479 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -12,4 +12,8 @@
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
 #define USERSTACK    1     // user stack pages
-
+#define TIME_LIMIT_1 1    // one time slice in the top queue
+#define TIME_LIMIT_2 2    // two subsequent time slices in the bottom queue
+#define BOOST_INTERVAL 64 // priority boosting  interval
+#define DEFAULT_TICKET_COUNT 10 // default number of tickets for a process
+#define PRINT_SCHEDULING 0 // enable printing of scheduling information
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..eed9664 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,13 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "syscall_stat.h"
+#include "syscall.h"
+
+struct spinlock syscall_lock;
+extern int syscall_counts[];
+extern int syscall_times[];
 
 struct cpu cpus[NCPU];
 
@@ -26,6 +33,41 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+// offline's code
+// random number generator for lottery scheduling
+static unsigned long rand_seed = 1;
+
+void
+srand(unsigned long seed) {
+  // Ensure seed is never 0 for xorshift
+  rand_seed = (seed == 0) ? 1 : seed;
+}
+
+unsigned long
+rand(void) {
+  // Xorshift32 algorithm --> https://en.wikipedia.org/wiki/Xorshift
+  rand_seed ^= rand_seed << 13;
+  rand_seed ^= rand_seed >> 17;
+  rand_seed ^= rand_seed << 5;
+  return rand_seed;
+}
+
+// Global variables for MLFQ scheduling
+static uint64 last_boost_time = 0; // Time of last boost
+static struct spinlock mlfq_lock; // Lock for MLFQ operations
+
+// MLFQ initialization
+void
+mlfq_init(void) {
+  initlock(&mlfq_lock, "mlfq_lock");
+  last_boost_time = 0;
+  srand(1);
+  for (int i = 0; i < NPROC; i++) {
+    proc[i].inQ = 1; // Start all processes in the first queue
+    proc[i].runtime = 0; // Initialize runtime
+  }
+}
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -146,6 +188,13 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  // Initialize MLFQ scheduling parameters-called for EACH new process
+  p->current_tickets = DEFAULT_TICKET_COUNT;
+  p->original_tickets = DEFAULT_TICKET_COUNT;
+  p->time_slices = 0;
+  p->inQ = 1; // Start in the first queue
+  p->runtime = 0; // Initialize runtime
+
   return p;
 }
 
@@ -322,6 +371,9 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->original_tickets = p->original_tickets;
+  np->current_tickets = p->original_tickets;
+
   return pid;
 }
 
@@ -454,21 +506,146 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+    // Priority boosting check
+    if(ticks - last_boost_time >= BOOST_INTERVAL) {
+      acquire(&mlfq_lock);
+      for(p = proc; p < &proc[NPROC]; p++) {
+        if(p->state != UNUSED && p->inQ == 2) {
+          // BOOST: Process 1 promoted to queue 0
+          if(PRINT_SCHEDULING == 1) {
+            printf("Process %d boosted to queue 1 due to inactivity\n", p->pid);
+          }
+          p->inQ = 1;
+          p->runtime = 0;
+        }
+      }
+      last_boost_time = ticks;
+      release(&mlfq_lock);
+    }
+
+
     int found = 0;
+
+    int total_tickets = 0;
+    // Calculate total tickets for all runnable processes
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+        total_tickets += p->current_tickets;
+      }
+      release(&p->lock);
+    }
+    if (total_tickets == 0) {
+      // reinitialize all processes' with their original tickets
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        p->current_tickets = p->original_tickets;
+        p->runtime = 0;
+        release(&p->lock);
+      }
+    }
+
+    // recalculate total_tickets after reinitialization
+    total_tickets = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-        found = 1;
+        total_tickets += p->current_tickets;
+      }
+      release(&p->lock);
+    }
+    while (total_tickets > 0) {
+      int indices[NPROC] = {0};
+      // fillup indices with process having three criteria: runnable, inQ == 1, current_tickets > 0
+      int count = 0;
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->inQ == 1 && p->current_tickets > 0) {
+          indices[count++] = p - proc; // store index of process
+        }
+        release(&p->lock);
+      }
+      if (count == 0) {
+        // no runnable processes in this queue, break to next queue
+        break;
+      }
+      // find winner
+      int winning_value = rand() % total_tickets;
+      int current_sum = 0;
+      for (int i = 0; i < count; i++) {
+        p = &proc[indices[i]];
+        acquire(&p->lock);
+        current_sum += p->current_tickets;
+
+        if (current_sum > winning_value) {
+          // found the winner
+          if(p->inQ == 1 && p->state == RUNNABLE) {
+            while(p->state == RUNNABLE && p->runtime < TIME_LIMIT_1){
+              // Switch to chosen process.  It is the process's job
+              // to release its lock and then reacquire it
+              // before jumping back to us.
+              p->state = RUNNING;
+              c->proc = p;
+
+              swtch(&c->context, &p->context);
+
+              // Process is done running for now.
+              // It should have changed its p->state before coming back.
+              c->proc = 0;
+              p->runtime += 1;
+              p->current_tickets--;
+              p->time_slices += 1;
+              found = 1;
+            }
+
+            if(p->state == RUNNABLE && p->runtime == TIME_LIMIT_1) {
+              // DEMO: Process 1 (sh) ran for 2 time ticks, demoted to queue 1
+              if(PRINT_SCHEDULING == 1) {
+                printf("Process %d ran for %d ticks, demoted to queue 2\n", p->pid, p->runtime);
+              }
+              p->inQ = 2;
+            }
+
+            p->runtime = 0; // reset runtime after running
+          }
+          // release(&p->lock);
+        }
+        release(&p->lock); // release lock if not the winner
+      }
+    }
+
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->inQ == 2 && p->state == RUNNABLE) {
+        while(p->state == RUNNABLE && p->runtime < TIME_LIMIT_2){
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          c->proc = p;
+          p->time_slices += 1;
+
+          swtch(&c->context, &p->context);
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          p->runtime += 1;
+          p->current_tickets--;
+          found = 1;
+        }
+
+        if(p->state == RUNNABLE && p->runtime < TIME_LIMIT_2) {
+          // PROMO: Process 1 (sh) ran for 3 time ticks, promoted to queue 0
+          if(PRINT_SCHEDULING == 1) {
+            printf("Process %d ran for %d ticks, promoted to queue 1\n", p->pid, p->runtime);
+          }
+          p->inQ = 1;
+        }
+
+        // update the process's state
+        p->runtime = 0; // reset runtime after running
+
       }
       release(&p->lock);
     }
@@ -693,3 +870,98 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+getpinfo(uint64 pstat_addr)
+{
+  struct pstat ps;
+  struct proc *p;
+  int i;
+
+  // Initializing pstat structure, this ensures that if a process slot is unused
+  // it will have default values of 0.
+  for(i = 0; i < NPROC; i++) {
+    ps.pid[i] = 0;
+    ps.inuse[i] = 0;
+    ps.inQ[i] = 0;
+    ps.tickets_original[i] = 0;
+    ps.tickets_current[i] = 0;
+    ps.time_slices[i] = 0;
+  }
+
+  // Fill pstat with process information
+  i = 0;
+  for(p = proc; p < &proc[NPROC] && i < NPROC; p++) {
+    acquire(&p->lock);
+    // printf("Process %d: state=%d\n", p->pid, p->state);
+    if(p->state != UNUSED) {
+      ps.pid[i] = p->pid;
+      ps.inuse[i] = 1;
+      ps.inQ[i] = p->inQ;
+      ps.tickets_original[i] = p->original_tickets;
+      ps.tickets_current[i] = p->current_tickets;
+      ps.time_slices[i] = p->time_slices;
+    }
+    release(&p->lock);
+    i++;
+  }
+
+  // Copy to user space
+  if(copyout(myproc()->pagetable, pstat_addr, (char*)&ps, sizeof(ps)) < 0)
+    return -1;
+
+  return 0;
+}
+
+// System call names array
+static char *syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_history] "history",
+  [SYS_settickets] "settickets",
+  [SYS_getpinfo] "getpinfo",
+};
+
+// Get syscall statistics for a specific syscall
+int
+syscall_stat(int syscall_num, struct syscall_stat *stat)
+{
+  if(syscall_num < 1 || syscall_num > 24)
+    return -1;
+
+  acquire(&syscall_lock);
+
+  // Copy syscall name
+  if(syscall_names[syscall_num]) {
+    strncpy(stat->syscall_name, syscall_names[syscall_num], 15);
+    stat->syscall_name[15] = 0;
+  } else {
+    strncpy(stat->syscall_name, "unknown", 15);
+    stat->syscall_name[15] = 0;
+  }
+
+  stat->count = syscall_counts[syscall_num];
+  stat->accum_time = syscall_times[syscall_num];
+
+  release(&syscall_lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ac022c4 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,12 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int current_tickets;         // Remaining tickets for lottery scheduling
+  int original_tickets;        // Original tickets for lottery scheduling
+  int time_slices;             // Number of time slices the process has been scheduled
+  int inQ;                     // Which queue the process is currently in
+  int runtime;                 // Total runtime in ticks for a single cycle of scheduling
+
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..9acdcf1
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+# ifndef _PSTAT_H_
+# define _PSTAT_H_
+# include "param.h"
+struct pstat {
+int pid [ NPROC ]; // the process ID of each process
+int inuse [ NPROC ]; // whether this slot of the process table is being used (1 or 0)
+int inQ [ NPROC ]; // which queue the process is currently in
+int tickets_original [ NPROC ]; // the number of tickets each process originally had
+int tickets_current [ NPROC ]; // the number of tickets each process currently has
+int time_slices [ NPROC ]; // the number of time slices each process has been scheduled
+};
+# endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..b26aa07 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,12 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
+
+
+int syscall_counts[30];
+int syscall_times[30];
+extern struct spinlock syscall_lock;
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -101,6 +107,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_history(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +135,51 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
+// Initialize syscall statistics
+void
+syscall_stat_init(void)
+{
+  initlock(&syscall_lock, "syscall_stat");
+  for(int i = 1; i < 30; i++) {
+    syscall_counts[i] = 0;
+    syscall_times[i] = 0;
+  }
+}
+
+// Modified syscall function to track statistics
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
+  uint64 start_time = ticks;  // Record start time
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
+
+    // Execute syscall
     p->trapframe->a0 = syscalls[num]();
+
+    // Increment call count
+    acquire(&syscall_lock);
+    syscall_counts[num]++;
+    release(&syscall_lock);
+
+    // Record execution time
+    uint64 end_time = ticks;
+    uint64 exec_time = end_time - start_time;
+
+    acquire(&syscall_lock);
+    syscall_times[num] += exec_time;
+    release(&syscall_lock);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..90f8fdb 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history 22
+#define SYS_settickets  23
+#define SYS_getpinfo    24
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..2e97aaf
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,5 @@
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..1e258d8 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
+#include "syscall_stat.h"
+
 
 uint64
 sys_exit(void)
@@ -91,3 +94,56 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// System call implementation
+uint64
+sys_history(void)
+{
+  int syscall_num;
+  uint64 stat_addr;
+  struct syscall_stat stat;
+
+  // arguments
+  argint(0, &syscall_num);
+  argaddr(1, &stat_addr);
+
+  // stat
+  if(syscall_stat(syscall_num, &stat) < 0)
+    return -1;
+
+  // Copy to user space
+  if(copyout(myproc()->pagetable, stat_addr, (char*)&stat, sizeof(stat)) < 0)
+    return -1;
+
+  return 0;
+}
+
+// settickets system call
+uint64
+sys_settickets(void)
+{
+  int tickets;
+
+  argint(0, &tickets);
+
+  if(tickets < 1) {
+    // Invalid ticket count, default values applied
+    myproc()->original_tickets = DEFAULT_TICKET_COUNT;
+    myproc()->current_tickets = DEFAULT_TICKET_COUNT;
+    return -1;
+  }
+  // printf("KERNEL --> Process %d setting tickets to %d\n", myproc()->pid, tickets);
+  myproc()->original_tickets = tickets;
+  myproc()->current_tickets = tickets;
+  return 0;
+}
+
+// getpinfo system call
+uint64
+sys_getpinfo(void)
+{
+  uint64 pstat_addr;
+  argaddr(0, &pstat_addr);
+
+  return getpinfo(pstat_addr);
+}
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..0938927
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,45 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int tickets = -1;
+
+  if(argc == 2) {
+    tickets = atoi(argv[1]);
+  }else if(argc < 2) {
+    tickets = -1;
+  }
+
+  // Set tickets
+  if(settickets(tickets) < 0) {
+    printf("PID %d: Set to default tickets due to invalid input\n", getpid());
+  } else {
+    printf("PID %d: Set tickets to %d\n", getpid(), tickets);
+  }
+
+  //Test forking
+  int pid = fork();
+  if(pid == 0) {
+    // Child process
+
+    // Consume CPU time
+    for(int i = 0; i < 1000000000; i++) {
+      sleep(200);
+    }
+    exit(0);
+  } else {
+    // Parent process
+
+    // Consume CPU time
+    for(int i = 0; i < 1000000000; i++) {
+      sleep(200);
+    }
+
+    wait(0);
+  }
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..e03f785
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,31 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/syscall.h"
+
+int
+main(int argc, char *argv[])
+{
+  struct syscall_stat stat;
+
+  if(argc == 1) {
+    // Print history for all system calls
+    for(int i = 1; i < 25; i++) {
+      if(history(i, &stat) == 0) {
+        printf("%d: syscall: %s, #: %d, time: %d\n",
+               i, stat.syscall_name, stat.count, stat.accum_time);
+      }
+    }
+  } else if(argc == 2) {
+    // Print history for a specific system call
+    int syscall_num = atoi(argv[1]);
+    if(history(syscall_num, &stat) == 0) {
+      printf("%d: syscall: %s, #: %d, time: %d\n",
+             syscall_num, stat.syscall_name, stat.count, stat.accum_time);
+    } else {
+      printf("Invalid syscall number\n");
+    }
+  }
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..3f41ce4
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,31 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  struct pstat ps;
+
+  if(getpinfo(&ps) < 0) {
+    printf("Error: getpinfo failed\n");
+    exit(1);
+  }
+
+  printf("PID\t|\tIn Use\t|\tinQ\t|Ori_Tickets\t|Curr_Tickets\t|Time_Slices\n");
+
+  for(int i = 0; i < 64; i++) {
+    if(ps.pid[i] == 0) {
+      continue;
+    }
+    printf("%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\n",
+           ps.pid[i],
+           ps.inuse[i],
+           ps.inQ[i],
+           ps.tickets_original[i],
+           ps.tickets_current[i],
+           ps.time_slices[i]);
+  }
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..1048357 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,18 @@
 struct stat;
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
+
+struct pstat {
+  int pid[64];
+  int inuse[64];
+  int inQ[64];
+  int tickets_original[64];
+  int tickets_current[64];
+  int time_slices[64];
+};
 
 // system calls
 int fork(void);
@@ -22,6 +36,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int history(int, struct syscall_stat*);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..397fec1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("history");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
